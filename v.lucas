#Trabajo Práctico Dos

########################  mostrar archivo  ############################

#Ver si está el paquete instalado
if (!require(readr)) {
  install.packages("readr")
}
library(readr)

#Establecer lugar de trabajo
getwd()
wdirectory <- ("C:/Users/Lucas/Desktop/proyecto2/Proyecto2")
setwd(wdirectory)

# Definir el nombre del archivo
archivo_zip <- "cr2_prDaily_2018.zip"

# Definir la url de descarga
url <-
  "https://www.cr2.cl/download/cr2_prdaily_2018-zip/?wpdmdl=15135"


# Comprobar si el archivo existe
if (!file.exists(archivo_zip)) {
  # Si no existe, descargarlo
  download.file(url, archivo_zip)
}
# Descomprimir el archivo zip
unzip(archivo_zip)
# Verificar si el archivo csv existe
file.exists("cr2_prDaily_2018/cr2_prDaily_2018.csv")


data_raw <- read_csv(file.choose(), col_names = TRUE)
#ruta al archivo csv y datos generales del csv
ls()
head(data_raw)


#### Leer el código de identificación de la estación pluviométrica ####


estacionID<-readline(prompt = "Ingrese el código de identificación de la estación pluviométrica: ")
estacionID #Notar que ya lo guarda como " " 


########## mostrar la informacion general de la Estación ID ###########

descripcionID <- data_raw[1:14, c("codigo_estacion", estacionID)]

descripcionID

#ahora se selecciona las mediciones de la base de datos para hacer EDA#


data_elegida<-data_raw[-c(1:14), c("codigo_estacion", estacionID)]#Descarta las primeras catorce filas
#y las fechas con los datos de la columna estacionID
data_na<- replace(data_elegida, data_elegida == -9999, NA) #cambia los -9999 por NA



data_limpia <- data_na #define data_na como data_limpia

#Extraer los na de data_na

data_limpia <- na.omit(data_limpia) # en df data_limpia se limpia usando na.omit

names(data_limpia)=c("Fecha","precipitacion") #cambia el nombre de nuestras variables por unas mas acorde

data_limpia


########################       EDA         ############################


es.faltante <- is.na(data_na) 
sum(es.faltante) #datos faltantes

#opcional
#na.index <- which(es.faltante)
#data_na[na.index] #fechas de cuales son los datos faltantes

#número de datos válidos
datos_validos <- !is.na(es.faltante)
sum(datos_validos)
#summary, sd y IQR
summary(data_limpia)

sd(data_limpia$precipitacion)        #Necesita correción #lo que hay que ingresar es la variable precipitacion ya antes nombrada

IQR(data_limpia$precipitacion)       #Necesita correción # lo mismo


######################## SERIES TEMPORALES ############################


#Ver si está el paquetehydroTSM instalado{
if (!require(hydroTSM)) {
  install.packages("hydroTSM")
}
library(hydroTSM)


date.ini <-paste0("La fecha inicial de la estaciónID ingresada es: ", data_limpia[1,"Fecha"])  
date.fin <-paste0("La fecha final de la estaciónID ingresada es: ", data_limpia[nrow(data_limpia), "Fecha"])
date.ini
date.fin







library(hydroTSM)

# Obtener la fecha inicial y final de la estación
date.ini <-descripcionID[11,estacionID]
date.fin <-descripcionID[12,estacionID]
str(date.ini)
str(date.fin)
#Debido a que date.ini y date.fin son data frames con más de una fila. 
#La función dip() espera recibir argumentos de clase "Date", pero en este caso, 
#estás pasando objetos con más de una fecha.




# Extraer las fechas individuales
fecha_ini <- as.Date(date.ini[[1]])
fecha_fin <- as.Date(date.fin[[1]])

# Crear la secuencia temporal usando dip, mip y yip

secuencia_diaria <- dip(from = fecha_ini, to = fecha_fin)
secuencia_diaria <- as.Date.character(secuencia_diaria)

secuencia_diaria

secuencia_mensual <- mip(from = fecha_ini, to = fecha_fin)
secuencia_mensual <- as.Date(secuencia_mensual)

secuencia_mensual

secuencia_anual <- yip(from = fecha_ini, to = fecha_fin)
secuencia_anual <- as.Date(secuencia_anual)

secuencia_anual



######################## G R A F I C O S ##############################
#######################################################################


#Acá usaremos data_limpia para trabajar con el inicio_observaciones hasta fin_observaciones sin NA




# Convertir la columna Fecha a tipo Date

data_limpia$Fecha <- as.Date(data_limpia$Fecha)

# Convertir la columna precipitacion a tipo numeric
data_limpia$precipitacion <- as.numeric(data_limpia$precipitacion)
str(data_limpia)



#Tengo data_limpia convertida en date y numero
#Ahoraseparo por fecha y convertida en formado adecuado Y-m-d
Date.data_limpia<-strptime(data_limpia$Fecha, format = "%Y-%m-%d")
Date.data_limpia
#serietemporal
Date.data_limpia=format(Date.data_limpia,"%Y-%m-%d")
#Ahora se agrega las precipitaciones a la secuencia temporal diaria
data_limpia.diaria<-aggregate(data_limpia$precipitacion, by=list(Date.data_limpia), FUN=sum)
names(data_limpia.diaria)<-c("Date.data_limpia", "precipitacion")
data_limpia.diaria$Date.data_limpia=as.Date(data_limpia.diaria$Date.data_limpia, "%Y-%m-%d")


#generar secuencias temporales,  la cual es ordenada e incluye series irregulares
data_limpia.diaria.ts=zoo(data_limpia.diaria$precipitacion, order.by = data_limpia.diaria$Date.data_limpia)
head(data_limpia.diaria.ts)
#graficando los datos de precipitacion
plot(data_limpia.diaria.ts, xlab ="year", ylab="precipitation, daily in mm")


#Graficar diaria, mensual y anual series usando hydroplot
hydroplot(data_limpia.diaria.ts, var.type ="Precipitation", var.unit = "mm", xlab ="Time", ylab = "precipitation in mm")

hydroplot()


########################  FUNCIONES EDA   #############################



Est.ID <- function(estacionID) {
 paste("La estacion ID es" , estacionID)
}
Est.ID (estacionID = estacionID)


DatosFaltantes <- function(es.faltante) {
  paste("Los datos faltantes son", sum(es.faltante))
}
DatosFaltantes (es.faltante = sum(es.faltante))


DatosValidos <- function(datos_validos) {
  paste("Los datos validos son", sum(datos_validos))
}
DatosValidos (datos_validos = sum(datos_validos))


SummaryValues <- function(summary) {
  paste("valor" , summary(data_limpia))
}
SummaryValues (summary = summary(data_limpia))


DesviacionEstandar <- function(sd) {
  paste("la desviacion estandar es" , sd(data_limpia$precipitacion))
}
DesviacionEstandar (sd = sd(data_limpia$precipitacion))


RangoIntercuantil <- function(IQR){
  paste("El rango intercuantil es",IQR(data_limpia$precipitacion))
}
RangoIntercuantil(IQR = IQR(data_limpia$precipitacion) )



my.dates <- as.Date(c(secuencia_diaria))
my.dates

my.seasons <- time2season(my.dates, out.fmt = "seasons")

my.seasons


DatosFaltantesDiarios <- function(my.dates){
  paste("los datos faltantes de la secuencia diaria son", sum(my.dates) )
}
DatosFaltantesDiarios(my.dates = sum(my.dates))

es.faltantediario <- is.na(secuencia_diaria) 
sum(es.faltantediario) #datos faltantes


######################## FUNCION GRAFICOS #############################


GraficosHydroTSM <- function(hydroplot){
hydroplot("Grafico",hydroplot(data_limpia.diaria.ts, var.type ="Precipitation", var.unit = "mm", xlab ="Time", ylab = "precipitation in mm")
)
}
RangoIntercuantil(plot = hydroplot(data_limpia.diaria.ts, var.type ="Precipitation", var.unit = "mm", xlab ="Time", ylab = "precipitation in mm")
)





